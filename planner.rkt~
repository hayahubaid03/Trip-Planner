#lang dssl2

let eight_principles = ["Know your rights.",
     "Acknowledge your sources.",
     "Protect your work.",
     "Avoid suspicion.",
     "Do your own work.",
     "Never falsify a record or permit another person to do so.",
     "Never fabricate data, citations, or experimental results.",
     "Always tell the truth when discussing your work with your instructor."]

# Final project: Trip Planner

import cons
import 'project-lib/dictionaries.rkt'
import 'project-lib/graph.rkt'
import 'project-lib/binheap.rkt'
import 'project-lib/stack-queue.rkt'

### Basic Types ###

#  - Latitudes and longitudes are numbers:
let Lat?  = num?
let Lon?  = num?

#  - Point-of-interest categories and names are strings:
let Cat?  = str?
let Name? = str?

### Raw Item Types ###

#  - Raw positions are 2-element vectors with a latitude and a longitude
let RawPos? = TupC[Lat?, Lon?]

#  - Raw road segments are 4-element vectors with the latitude and
#    longitude of their first endpoint, then the latitude and longitude
#    of their second endpoint
let RawSeg? = TupC[Lat?, Lon?, Lat?, Lon?]

#  - Raw points-of-interest are 4-element vectors with a latitude, a
#    longitude, a point-of-interest category, and a name
let RawPOI? = TupC[Lat?, Lon?, Cat?, Name?]

### Contract Helpers ###

# ListC[T] is a list of `T`s (linear time):
let ListC = Cons.ListC
# List of unspecified element type (constant time):
let List? = Cons.list?


interface TRIP_PLANNER:

    # Returns the positions of all the points-of-interest that belong to
    # the given category.
    def locate_all(
            self,
            dst_cat:  Cat?           # point-of-interest category
        )   ->        ListC[RawPos?] # positions of the POIs

    # Returns the shortest route, if any, from the given source position
    # to the point-of-interest with the given name.
    def plan_route(
            self,
            src_lat:  Lat?,          # starting latitude
            src_lon:  Lon?,          # starting longitude
            dst_name: Name?          # name of goal
        )   ->        ListC[RawPos?] # path to goal

    # Finds no more than `n` points-of-interest of the given category
    # nearest to the source position.
    def find_nearby(
            self,
            src_lat:  Lat?,          # starting latitude
            src_lon:  Lon?,          # starting longitude
            dst_cat:  Cat?,          # point-of-interest category
            n:        nat?           # maximum number of results
        )   ->        ListC[RawPOI?] # list of nearby POIs


class TripPlanner (TRIP_PLANNER):
    let road_segment
    let interest_points
    let graph
    let AList
    let BList
    let length
    let distancelist
    let prev
    let CList
    def __init__(self, road_segment, interest_points):
        self.road_segment = road_segment
        self.interest_points = interest_points
        let results = self.helper_function()
        let points = results[0]
        self.length = results[1]
        self.distancelist = [inf; self.length]
        self.prev = [None; self.length]
        self.AList = AssociationList()
        self.BList = AssociationList()
        self.CList = self.initializepointList()
        self.graph = WuGraph(self.length)
        for i in range(self.length):
            self.AList.put(i, points[i])
            self.BList.put(points[i], i)
        for j in self.road_segment: 
            let w = ((j[2]-j[0])**2 + (j[3]-j[1])**2)**0.5
            let p1 = self.BList.get([j[0],j[1]])
            let p2 = self.BList.get([j[2], j[3]])
            self.graph.set_edge(p1, p2, w)
            
    def initializepointList(self):
        let Clist = AssociationList()
        for point in self.interest_points:
            Clist.put([point[0], point[1]], point)
        return Clist
            
    def helper_function(self):
        let length = 0
        let points = vec(self.road_segment.len()*2)
        let i
        for i in self.road_segment:
            let flag1 = True
            let flag2 = True
            for road in range (points.len()): 
                if [i[0], i[1]] == points[road]:
                    flag1 = False
                if [i[2], i[3]] == points[road]:
                    flag1 = False
            if flag1 == True and flag2== True:
                points[length] = [i[0], i[1]]
                points[length+1] = [i[2], i[3]]
                length = length + 2
            elif flag1 == True:
                 points[length] = [i[0], i[1]]
                 length = length + 1
            elif flag2 == True:
                 points[length] = [i[2], i[3]]
                 length = length + 1
        return [points, length]
        
    def dijkstra(self, startpoint):
        let priority_queue = BinHeap(self.length**2, λ x,y: self.distancelist[x] < self.distancelist[y])
        self.distancelist[startpoint] = 0
        let seen = [None; self.length]
        let seen_count = 0
        priority_queue.insert(startpoint)
        while priority_queue.len() != 0:
            let nearest_point = priority_queue.find_min()
            priority_queue.remove_min()
            let visited = False
            for i in seen:
                if i == nearest_point:
                    visited = True
                    break
            if visited == False:
                seen[seen_count] = nearest_point
                seen_count = seen_count + 1
                let current = self.graph.get_adjacent(nearest_point)
                while current != None:
                    if self.distancelist[nearest_point] + self.graph.get_edge(nearest_point, current.data) < self.distancelist[current.data]:
                       self.distancelist[current.data] = self.distancelist[nearest_point] + self.graph.get_edge(nearest_point, current.data)
                       self.prev[current.data] = cons(self.AList.get(nearest_point), self.prev[nearest_point])
                       priority_queue.insert(current.data)
                    current = current.next
                    
     
    def locate_all(self, dst_cat):
        let list = None
        let add = True
        for points in self.interest_points:               
            if points[2] == dst_cat:
                let check = Cons.to_vec(list)
                if list != None and [points[0], points[1]] == check[0]:
                    add = False 
                list = Cons.from_vec(check)
                if add == True: 
                    list = cons([points[0], points[1]], list)
                  
             # else:
                  #if [points[0], points[1]] != list.data[0]:
                     #list = cons([points[0], points[1]], list) 
                           
           
        return list
            
    def plan_route(self, src_lat, src_lon, dst_name):
        let startpoint = self.BList.get([src_lat, src_lon])
        let endpoint = None
        let flag = False
        let revpath_list = None
        #let current = endpoint
        #find the interest points with the given name
        for points in self.interest_points:
            if points[3] == dst_name:
                endpoint = self.BList.get([points[0], points[1]])
                flag = True   
        self.dijkstra(startpoint)
        let path_list = [None]
        if flag == True and endpoint != None:
            
            #let current = endpoint
        #create a list that adds endpoint to the path list made in dijksta
            path_list = cons(self.AList.get(endpoint),self.prev[endpoint])
        #reverse it so that the points are in the correct order
            revpath_list = Cons.rev(path_list)
            if revpath_list == cons(self.AList.get(endpoint), None) and endpoint != startpoint: 
                revpath_list = None
        #if the  pathlist only contains the endpoint, there is no path from start to end so return None instead 
        else: 
            revpath_list == None
        #if revpath_list == cons(self.AList.get(endpoint), None) and endpoint != startpoint:
            #revpath_list = None
        return revpath_list
            
        
    def find_nearby(self, src_lat, src_lon, dst_cat, n):
        let startpoint = self.BList.get([src_lat, src_lon])
        self.dijkstra(startpoint)
    
    # Create a list to store the nearby points of interest 
        let located_cat = Cons.to_vec(self.locate_all(dst_cat))
        #sorts the list by distance
        let sorted = BinHeap(located_cat.len(), λ x,y: x[1] < y[1])
        for i in range(located_cat.len()):
            if self.distancelist[self.BList.get(located_cat[i])] != inf: 
                sorted.insert([located_cat[i], self.distancelist[self.BList.get(located_cat[i])]])
        #create a list to return
        let returnlist
        if sorted.len() >= n:  
            returnlist = [None; n]
        else: 
            returnlist = [None; sorted.len()]
        #fill the list n times using the sorted heap
        #while sorted.len() >= n: 
        for j in range(n):
             if sorted.len() == 0: 
                break 
             else:
                 returnlist[j] = sorted.find_min()[0]
                 for pt in self.interest_points:
                     if returnlist[j] == [pt[0],pt[1]] and pt[2] == dst_cat:
                         returnlist[j] = pt
                         break      
                 sorted.remove_min()
        return Cons.from_vec(returnlist)
                                                     
        
#   ^ YOUR CODE GOES HERE


def my_first_example():
    return TripPlanner([[0,0, 0,1], [0,0, 1,0]],
                       [[0,0, "bar", "The Empty Bottle"],
                        [0,1, "food", "Pierogi"]])
                        
def my_second_example():
    return TripPlanner([[0,0, 0,1], [0,0, 1,0], [0,1, 1,1], [1,0, 1,1], [1,1, 1,2], [1,1, 2,1], [2,2, 3,3]],
                       [[0,0, "food", "sandwiches"],
                        [0,1, "clothes", "jeans"], 
                        [1,1, "makeup", "sephora"], 
                        [1,2, "makeup", "ulta"],
                        [3,3, "food", "chipotle"],
                        [3,3, "food", "Wings"],
                        [2,2, "pharmacy", "CVS"]])
                     
                        
                   

test "locate_test()":
    assert my_first_example().locate_all("food") == \
        cons([0,1], None)
    assert my_second_example().locate_all("food") == cons([3,3], cons([0,0], None))

test "plan_test()":
   assert my_first_example().plan_route(0, 0, "Pierogi") == \
       cons([0,0], cons([0,1], None))
   assert my_second_example().plan_route(0, 0, "jeans") == cons([0,0], cons([0,1], None))
   assert my_second_example().plan_route(0,0, "ulta") == cons([0, 0], cons([1, 0], cons([1, 1], cons([1, 2], None))))
   assert my_second_example().plan_route(1,1, "chipotle") == None
   assert my_second_example().plan_route(0,1, "jeans") == cons([0,1], None)
   assert my_second_example().plan_route(1,1, "jewellery") == None
   

test "nearby_test()":
    assert my_first_example().find_nearby(0, 0, "food", 1) == cons([0,1, "food", "Pierogi"], None)
    assert my_second_example().find_nearby(1,2,"makeup", 2) == cons([1,2, "makeup", "ulta"],cons([1,1, "makeup", "sephora"], None))
    assert my_second_example().find_nearby(1,2,"makeup", 1) == cons([1,2, "makeup", "ulta"], None)
    assert my_second_example().find_nearby(0,0, "food", 3) == cons([0,0, "food", "sandwiches"], None)
    assert my_second_example().find_nearby(0,0, "barber", 2) == None
    assert my_second_example().find_nearby(0, 0, "pharmacy", 2) == None

test "Two equivalent routes":
    let tp = TripPlanner(
      [[-2, 0, 0, 2],
       [0, 2, 2, 0],
       [2, 0, 0, -2],
       [0, -2, -2, 0]],
      [[2, 0, 'cooper', 'Dennis']])
    let result = tp.plan_route(-2, 0, 'Dennis')
    assert Cons.to_vec(result) \
      == [[-2, 0], [0, -2], [2, 0]]
                   
test "BinHeap needs capacity > |V|":
    let tp = TripPlanner(
      [[0, 0, 0, 1],
       [0, 1, 3, 0],
       [0, 1, 4, 0],
       [0, 1, 5, 0],
       [0, 1, 6, 0],
       [0, 0, 1, 1],
       [1, 1, 3, 0],
       [1, 1, 4, 0],
       [1, 1, 5, 0],
       [1, 1, 6, 0],
       [0, 0, 2, 1],
       [2, 1, 3, 0],
       [2, 1, 4, 0],
       [2, 1, 5, 0],
       [2, 1, 6, 0]],
      [[0, 0, 'blacksmith', "Revere's Silver Shop"],
       [6, 0, 'church', 'Old North Church']])
    let result = tp.plan_route(0, 0, 'Old North Church')
    assert Cons.to_vec(result) \
      == [[0, 0], [2, 1], [6, 0]]
 
test "BFS is not SSSP (nearby)":
    let tp = TripPlanner(
      [[0, 0, 0, 9],
       [0, 9, 9, 9],
       [0, 0, 1, 1],
       [1, 1, 2, 2],
       [2, 2, 3, 3],
       [3, 3, 4, 4],
       [4, 4, 5, 5],
       [5, 5, 6, 6],
       [6, 6, 7, 7],
       [7, 7, 8, 8],
       [8, 8, 9, 9]],
      [[7, 7, 'haberdasher', 'Archit'],
       [8, 8, 'haberdasher', 'Braden'],
       [9, 9, 'haberdasher', 'Cem']])
    let result = tp.find_nearby(0, 0, 'haberdasher', 2)
    assert Cons.to_vec(result) \
      == [[7, 7, 'haberdasher', 'Archit'], [8, 8, 'haberdasher', 'Braden']]
  
test "MST is not SSSP (nearby)":
    let tp = TripPlanner(
      [[-1.1, -1.1, 0, 0],
       [0, 0, 3, 0],
       [3, 0, 3, 3],
       [3, 3, 3, 4],
       [0, 0, 3, 4]],
      [[0, 0, 'food', 'Sandwiches'],
       [3, 0, 'bank', 'Union'],
       [3, 3, 'barber', 'Judy'],
       [3, 4, 'barber', 'Tony']])
    let result = tp.find_nearby(-1.1, -1.1, 'barber', 1)
    assert Cons.to_vec(result) \
      == [[3, 4, 'barber', 'Tony']]
      
                   
  



